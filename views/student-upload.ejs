<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('partials/head') %>
    <style>
		#uploadForm {
			background: white;
			padding: 1em;
		}
        .video-item {
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
			background: white;
        }
        .spinner-border {
            width: 3rem;
            height: 3rem;
        }
		.video-container {
			position: relative;
			padding-bottom: 56.25%; /* 16:9 aspect ratio */
			height: 0;
			overflow: hidden;
		}
		.video-container video {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
		}
		.processing-message, .error-message {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			display: flex;
			align-items: center;
			justify-content: center;
			background-color: #f8f9fa;
			border: 1px solid #dee2e6;
		}
		
		/* New styles for upload form */
        .card {
            border-radius: 0;
        }
        .card-header {
            background-color: black;
            color: white;
            border-radius: 0;
        }
        .card-body {
            padding-top: 1.25rem;
        }
        .upload-form-row {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }
        .upload-form-label {
            width: 100px;
            text-align: right;
            padding-right: 1rem;
        }
        .upload-form-input {
            flex-grow: 1;
        }
        #uploadProgressBar {
            margin-top: 1rem;
        }
		
		.card, .video-item {
            border-radius: 0;
        }
        .video-item {
            margin-bottom: 20px;
            padding: 0;
            border: 1px solid #ddd;
            background: white;
        }
        .video-title {
            background-color: black;
            color: white;
            padding: 10px;
            margin: 0;
        }
        .video-content {
            padding: 10px;
        }
        .score-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 10px;
            margin-bottom: 10px;
        }
        .score {
            font-size: 1.5em;
            font-weight: bold;
        }
        .truncate {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100%;
        }
    </style>
</head>
<body>
    <%- include('partials/header') %>
    <div class="container mt-4">
        <h1>Potje:  <%= room.uniqueIdentifier.slice(0, 4).toUpperCase() %>-<%= room.uniqueIdentifier.slice(4).toUpperCase() %></h1>
		<p>Video's worden automatisch verwijderd op: <%= new Date(room.expiresAt).toLocaleString('nl-NL', { timeZone: 'Europe/Amsterdam', day: '2-digit', month: '2-digit', year: '2-digit'}).replace(/\//g, '-') %></p>
        <% if (locals.error) { %>
            <div class="alert alert-danger"><%= error %></div>
        <% } %>
        <% if (locals.success) { %>
            <div class="alert alert-success"><%= success %></div>
        <% } %>
        
        <!-- Updated upload form -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">Upload een video</h5>
            </div>
            <div class="card-body">
                <form id="uploadForm" enctype="multipart/form-data">
                    <div class="upload-form-row">
                        <label for="title" class="upload-form-label">Titel:</label>
                        <div class="upload-form-input">
                            <input type="text" class="form-control" id="title" name="title" required>
                        </div>
                    </div>
                    <div class="upload-form-row">
                        <label for="video" class="upload-form-label">Bestand:</label>
                        <div class="upload-form-input">
                            <div class="input-group">
                                <div class="custom-file">
                                    <input type="file" class="custom-file-input" id="video" name="video" accept="video/*" required>
                                    <label class="custom-file-label" for="video">Kies bestand</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="upload-form-row">
                        <div class="upload-form-label"></div>
                        <div class="upload-form-input">
                            <input type="hidden" name="roomId" value="<%= room.id %>">
                            <button type="submit" class="btn btn-primary">Upload Video</button>
                        </div>
                    </div>
                </form>
                <div class="progress" id="uploadProgressBar" style="display: none;">
                    <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                </div>
            </div>
        </div>
        
        <h2 class="mt-4">Jouw Video's</h2>
        <% if (videos.length === 0) { %>
            <p>Je hebt nog geen video's geupload.</p>
        <% } else { %>
            <div class="row">
                <% videos.forEach(video => { %>
                    <div class="col-md-6 mb-4">
                        <div class="video-item">
                            <h3 class="video-title" data-video-id="<%= video.id %>"><%= video.title %></h3>
                            <div class="video-content">
                                <p>Uploaddatum: <%= new Date(video.createdAt).toLocaleString('nl-NL', { timeZone: 'Europe/Amsterdam', day: '2-digit', month: '2-digit', year: '2-digit', hour: '2-digit', minute: '2-digit' }).replace(/\//g, '-') %></p>
                                <div class="video-container" data-video-id="<%= video.id %>">
                                    <% if (video.processingStatus === 'completed') { %>
                                        <video controls class="img-fluid">
                                            <source src="/videos/stream/<%= video.filePath %>" type="video/mp4">
                                            Your browser does not support the video tag or the video format.
                                        </video>
                                    <% } else if (video.processingStatus === 'processing' || video.processingStatus === 'pending_transcription' || video.processingStatus === 'transcribing' || video.processingStatus === '') { %>
                                        <div class="processing-message">
                                            <p>De video wordt verwerkt. Dit kan enkele minuten duren...</p>
                                        </div>
                                    <% } else { %>
                                        <div class="error-message">
                                            <p>Het verwerken van de video is mislukt. Probeer het opnieuw</p>
                                        </div>
                                    <% } %>
                                </div>
                                <% if (video.scoringStatus === 'completed') { %>
                                    <div class="score-container">
                                        <% 
                                            const scoreData = typeof video.scoreData === 'string' ? JSON.parse(video.scoreData) : video.scoreData;
                                            const sum = Object.values(scoreData).reduce((acc, category) => acc + category.score, 0);
                                            const percentage = (sum / 30) * 100;
                                        %>
                                        <span class="score">Polarisatie score: <%= percentage.toFixed(0) %>%</span>
                                        <a href="/videos/viewScore/<%= video.id %>" class="btn btn-info btn-sm"><i class="fa-solid fa-magnifying-glass"></i> Bekijk details</a>
                                    </div>
                                <% } %>
                                <div class="mt-3">
                                    <h5>Comments:</h5>
                                    <div class="video-comment" data-video-id="<%= video.id %>"><%= video.comment || 'Geen comments. Klik hier om toe te voegen' %></div>
                                </div>
                                <div class="mt-3">
									<h5>Transcriptie:</h5>
									<div class="video-transcription truncate" data-video-id="<%= video.id %>">
										<%= video.transcription ? video.transcription.substring(0, 150) + '...' : 'Transcriptie nog niet beschikbaar.' %>
									</div>
									<% if (video.transcription) { %>
										<button class="btn btn-primary btn-sm mt-2 view-transcript" 
												data-video-id="<%= video.id %>"
												data-transcription="<%= encodeURIComponent(video.transcription) %>">
											<i class="fa-solid fa-file"></i> Bekijk volledige transcriptie
										</button>
									<% } %>
								</div>
                                <button class="btn btn-danger btn-sm mt-2 delete-video" data-video-id="<%= video.id %>"><i class="fas fa-trash"></i> Delete Video</button>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>
        <% } %>
    </div>

    <!-- Transcript Modal -->
    <div class="modal fade" id="transcriptModal" tabindex="-1" role="dialog" aria-labelledby="transcriptModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="transcriptModalLabel">Transcriptie</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="transcriptModalBody">
                    <!-- Transcript content will be inserted here -->
                </div>
            </div>
        </div>
    </div>
    <%- include('partials/footer') %>
	
	
<script>
$(document).ready(function() {
    // Add this to update the file input label with the selected filename
	$('.custom-file-input').on('change', function() {
		var fileName = $(this).val().split('\\').pop();
		$(this).next('.custom-file-label').html(fileName);
	});

	// Modify the upload form submission to show/hide the progress bar
	$('#uploadForm').on('submit', function(e) {
		e.preventDefault();
		var formData = new FormData(this);

		$.ajax({
			xhr: function() {
				var xhr = new window.XMLHttpRequest();
				xhr.upload.addEventListener("progress", function(evt) {
					if (evt.lengthComputable) {
						var percentComplete = evt.loaded / evt.total;
						percentComplete = parseInt(percentComplete * 100);
						$('#uploadProgressBar').show().find('.progress-bar')
							.width(percentComplete + '%')
							.attr('aria-valuenow', percentComplete)
							.text(percentComplete + '%');
					}
				}, false);
				return xhr;
			},
			url: '/videos/upload',
			type: 'POST',
			data: formData,
			processData: false,
			contentType: false,
			beforeSend: function() {
				$('#uploadProgressBar').show();
			},
			success: function(response) {
				alert('Video is geupload!');
				location.reload();
			},
			error: function(xhr, status, error) {
				alert('Upload mislukt: ' + error);
			},
			complete: function() {
				$('#uploadProgressBar').hide();
			}
		});
	});

    // Function to check conversion status for .mov files
    function checkConversionStatus(videoId) {
        $.get('/videos/' + videoId + '/conversion-status', function(data) {
            if (data.conversionStatus === 'completed') {
                location.reload(); // Reload the page to show the converted video
            } else if (data.conversionStatus === 'failed') {
                alert('Video conversie mislukt. Probeer het opnieuw.');
            } else {
                // If still converting, check again after 5 seconds
                setTimeout(function() { checkConversionStatus(videoId); }, 5000);
            }
        });
    }

    // Handle editing for title, comment, and transcription
    $('.video-title, .video-comment').each(function() {
        makeEditable($(this), $(this).data('video-id'), $(this).attr('class').split(' ')[0].split('-')[1]);
    });

    // Handle video deletion
    $('.delete-video').on('click', function() {
        var videoId = $(this).data('video-id');
        if (confirm('Weet je zeker dat je deze video wilt verwijderen?')) {
            $.ajax({
                url: '/videos/' + videoId,
                type: 'DELETE',
                success: function(result) {
                    $('[data-video-id="' + videoId + '"]').closest('.col-md-6').remove();
                },
                error: function(xhr, status, error) {
                    alert('An error occurred while deleting the video.');
                }
            });
        }
    });

    // Function to make elements editable
    function makeEditable(element, videoId, field) {
        element.off('click').on('click', function(e) {
            e.stopPropagation();
            if (element.find('input, textarea').length > 0) return;

            var currentText = element.text();
            var inputElement = field === 'title' ? 
                $('<input type="text" class="form-control">').val(currentText) :
                $('<textarea class="form-control">').val(currentText);
            
            element.empty().append(inputElement);
            inputElement.focus();

            function saveText() {
                var newText = inputElement.val();
                if (newText !== currentText) {
                    $.ajax({
                        url: '/videos/' + videoId + '/' + field,
                        type: 'PUT',
                        data: { [field]: newText },
                        success: function(result) {
                            element.text(newText);
                        },
                        error: function(xhr, status, error) {
                            alert('An error occurred while updating the ' + field + '.');
                            element.text(currentText);
                        }
                    });
                } else {
                    element.text(currentText);
                }
            }

            inputElement.on('blur', saveText);
            inputElement.on('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    saveText();
                }
            });
        });
    }
	
	// View transcript in modal
    $('.view-transcript').on('click', function() {
        var transcription = decodeURIComponent($(this).data('transcription'));
        $('#transcriptModalBody').text(transcription);
        $('#transcriptModal').modal('show');
    });

    $('.video-transcription').on('click', function() {
        $(this).siblings('.view-transcript').click();
    });
	
});
</script>
</body>
</html>